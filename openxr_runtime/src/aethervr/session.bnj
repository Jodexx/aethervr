use std.{memory, math};

use xr;

use aethervr.{
    pose,
    time,
    constants,
    input,
    log,
    instance.Instance,
    space.{Space, SpaceType},
    swapchain.{Swapchain, SwapchainImage},
    action.{ActionSet, Action},
    graphics.{GraphicsBackend, ImageRegion},
    input.{InputState, HeadsetState, ControllerState},
    tracker_connection.TrackerConnection,
    input_mapper.InputMapper,
    utils.handle_buffer_size,
};

enum FrameState {
    ENDED,
    WAITED,
    BEGAN,
}

struct Session {
    var instance: *Instance;
    var state: xr.SessionState;

    var graphics_backend: *GraphicsBackend;
    var frame_state: FrameState;
    var last_image_id: u32;

    var view_configuration_type: xr.ViewConfigurationType;

    var input_state: InputState;
    var tracker_connection: TrackerConnection;
    var input_mapper: InputMapper;

    var running: bool;
    var action_sets_attached: bool;
    var actions_synced_once: bool;
    var synchronize_on_wait_frame: bool;
    var exit_on_idle: bool;

    pub func create(instance: *Instance, create_info: *xr.SessionCreateInfo) -> (*Session, xr.Result) {
        log.info("Creating session");

        if !Instance.check_system(create_info.system_id) {
            return (null, xr.Result.ERROR_SYSTEM_INVALID);
        }

        if !instance.graphics_reqs_queried {
            log.error("Graphics requirements have not been queried");
            return (null, xr.Result.ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING);
        }

        if create_info.next == null {
            log.error("Pointer to graphics binding is null");
            return (null, xr.Result.ERROR_GRAPHICS_DEVICE_INVALID);
        }

        var graphics_backend = GraphicsBackend.new(create_info);
        if !graphics_backend.has_value {
            return (null, xr.Result.ERROR_GRAPHICS_DEVICE_INVALID);
        }

        var session = memory.box(Session {
            instance,
            state: xr.SessionState.UNKNOWN,
            graphics_backend: graphics_backend.value,
            frame_state: FrameState.ENDED,
            last_image_id: 0,
            view_configuration_type: undefined,
            tracker_connection: TrackerConnection.connect(),
            input_state: InputState.new(),
            input_mapper: undefined,
            running: false,
            action_sets_attached: false,
            actions_synced_once: false,
            synchronize_on_wait_frame: false,
            exit_on_idle: false,
        });

        session.input_mapper = InputMapper.new(session);
        
        session.tracker_connection.send_info(
            instance.application_name.slice(),
            graphics_backend.value.id(),
        );

        session.transition_to(xr.SessionState.IDLE);
        session.transition_to(xr.SessionState.READY);

        return (session, xr.Result.SUCCESS);
    }

    pub func begin(self, begin_info: *xr.SessionBeginInfo) -> xr.Result {
        if self.running {
            return xr.Result.ERROR_SESSION_RUNNING;
        }

        if self.state != xr.SessionState.READY {
            return xr.Result.ERROR_SESSION_NOT_READY;
        }

        if begin_info.primary_view_configuration_type != xr.ViewConfigurationType.PRIMARY_STEREO {
            return xr.Result.ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED;
        }

        log.info("Beginning session");

        self.view_configuration_type = begin_info.primary_view_configuration_type;
        
        self.running = true;
        self.synchronize_on_wait_frame = true;
        
        return xr.Result.SUCCESS;
    }

    pub func end(self) -> xr.Result {
        if !self.running {
            return xr.Result.ERROR_SESSION_NOT_RUNNING;
        }

        if self.state != xr.SessionState.STOPPING {
            return xr.Result.ERROR_SESSION_NOT_STOPPING;
        }

        self.transition_to(xr.SessionState.IDLE);

        if self.exit_on_idle {
            self.transition_to(xr.SessionState.EXITING);
            self.exit_on_idle = false;
        }

        self.running = false;

        return xr.Result.SUCCESS;
    }

    pub func request_exit_session(self) -> xr.Result {
        if !self.running {
            return xr.Result.ERROR_SESSION_NOT_RUNNING;
        }

        if self.state == xr.SessionState.READY {
            self.transition_to(xr.SessionState.SYNCHRONIZED);
        }

        if self.state == xr.SessionState.FOCUSED {
            self.transition_to(xr.SessionState.VISIBLE);
        }

        if self.state == xr.SessionState.VISIBLE {
            self.transition_to(xr.SessionState.SYNCHRONIZED);
        }

        self.transition_to(xr.SessionState.STOPPING);
        
        self.exit_on_idle = true;
        self.synchronize_on_wait_frame = false;

        return xr.Result.SUCCESS;
    }

    pub func locate_views(
        self,
        view_locate_info: *xr.ViewLocateInfo,
        view_state: *xr.ViewState,
        view_capacity_input: u32,
        view_count_output: *u32,
        views: *xr.View
    ) -> xr.Result {
        if view_locate_info.view_configuration_type != self.view_configuration_type {
            return xr.Result.ERROR_VALIDATION_FAILURE;
        }

        if view_locate_info.view_configuration_type != xr.ViewConfigurationType.PRIMARY_STEREO {
            return xr.Result.ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED;
        }

        if view_locate_info.display_time <= 0 {
            return xr.Result.ERROR_TIME_INVALID;
        }

        var buffer_info = handle_buffer_size(2, view_count_output, view_capacity_input);
        if buffer_info.0 {
            return buffer_info.1;
        }

        view_state.view_state_flags =
            xr.VIEW_STATE_ORIENTATION_VALID_BIT |
            xr.VIEW_STATE_POSITION_VALID_BIT |
            xr.VIEW_STATE_ORIENTATION_TRACKED_BIT |
            xr.VIEW_STATE_POSITION_TRACKED_BIT;

        var base = view_locate_info.space as *Space;
        views[0].pose = base.get_relative_pose(self.input_state.headset.pose, view_locate_info.display_time).to_xr();
        views[1].pose = base.get_relative_pose(self.input_state.headset.pose, view_locate_info.display_time).to_xr();

        views[0].fov = xr.Fovf { angle_left: -0.785, angle_right: 0.785, angle_up: 0.785, angle_down: -0.785 };
        views[1].fov = xr.Fovf { angle_left: -0.785, angle_right: 0.785, angle_up: 0.785, angle_down: -0.785 };

        return xr.Result.SUCCESS;
    }

    pub func wait_frame(self, info: *xr.FrameWaitInfo, state: *xr.FrameState) -> xr.Result {
        if self.synchronize_on_wait_frame {
            self.transition_to(xr.SessionState.SYNCHRONIZED);
            self.transition_to(xr.SessionState.VISIBLE);
            self.transition_to(xr.SessionState.FOCUSED);
            self.synchronize_on_wait_frame = false;
        }
        
        if !self.running {
            return xr.Result.ERROR_SESSION_NOT_RUNNING;
        }

        var now = time.now();
        var remainder = now % constants.TIME_PER_FRAME_NS;
        var next_frame: i64;

        if remainder == 0 {
            next_frame = now + constants.TIME_PER_FRAME_NS;
        } else {
            next_frame = now + constants.TIME_PER_FRAME_NS - remainder;
        }

        while time.now() < next_frame {}

        state.predicted_display_time = time.now() + constants.TIME_PER_FRAME_NS;
        state.predicted_display_period = constants.TIME_PER_FRAME_NS;

        if self.state == xr.SessionState.SYNCHRONIZED {
            state.should_render = 0;
        } else {
            state.should_render = 1;
        }

        self.frame_state = FrameState.WAITED;
        return xr.Result.SUCCESS;
    }

    pub func begin_frame(self, info: *xr.FrameBeginInfo) -> xr.Result {
        if !self.running {
            return xr.Result.ERROR_SESSION_NOT_RUNNING;
        }

        if self.frame_state == FrameState.WAITED {
            self.frame_state = FrameState.BEGAN;
            return xr.Result.SUCCESS;
        } else if self.frame_state == FrameState.BEGAN {
            self.frame_state = FrameState.BEGAN;
            return xr.Result.FRAME_DISCARDED;
        } else if self.frame_state == FrameState.ENDED {
            return xr.Result.ERROR_CALL_ORDER_INVALID;
        } else {
            # Probably unreachable.
            return xr.Result.ERROR_RUNTIME_FAILURE;
        }
    }

    pub func end_frame(self, info: *xr.FrameEndInfo) -> xr.Result {
        if !self.running {
            return xr.Result.ERROR_SESSION_NOT_RUNNING;
        }

        if self.frame_state != FrameState.BEGAN {
            return xr.Result.ERROR_CALL_ORDER_INVALID;
        }

        if info.layer_count > 0 {
            if info.layers[0].type_ == xr.StructureType.COMPOSITION_LAYER_PROJECTION {
                self.present_frame(info.layers[0] as *xr.CompositionLayerProjection);
            }
        }

        self.frame_state = FrameState.ENDED;
        return xr.Result.SUCCESS;
    }

    func present_frame(self, layer: *xr.CompositionLayerProjection) {
        if layer.view_count < 1 {
            return;
        }
        
        var sub_image = &layer.views[0].sub_image;                
        var swapchain = sub_image.swapchain as *Swapchain;
        var image = &swapchain.images[swapchain.last_released_index];

        var region = ImageRegion {
            x: sub_image.image_rect.offset.x,
            y: sub_image.image_rect.offset.y,
            width: sub_image.image_rect.extent.width,
            height: sub_image.image_rect.extent.height,
            array_index: sub_image.image_array_index,
        };

        self.tracker_connection.present_image(image.id, region);
    }

    pub func create_reference_space(self, create_info: *xr.ReferenceSpaceCreateInfo) -> (*Space, xr.Result) {
        return Space.create_reference_space(self, create_info);
    }

    pub func create_action_space(self, create_info: *xr.ActionSpaceCreateInfo) -> (*Space, xr.Result) {
        return Space.create_action_space(self, create_info);
    }

    pub func enumerate_swapchain_formats(self) -> [i64] {
        log.info("Enumerating swapchain formats");
        return self.graphics_backend.get_supported_formats();
    }

    pub func create_swapchain(self, create_info: *xr.SwapchainCreateInfo) -> (*Swapchain, xr.Result) {
        return Swapchain.create(self, create_info);
    }

    pub func attach_action_sets(self, info: *xr.SessionActionSetsAttachInfo) -> xr.Result {
        log.info("Attaching action sets to session");

        if info.count_action_sets == 0 {
            return xr.Result.ERROR_VALIDATION_FAILURE;
        }

        # if self.action_sets_attached {
        #     return xr.Result.ERROR_ACTIONSETS_ALREADY_ATTACHED;
        # }

        for i in 0..info.count_action_sets {
            var action_set = info.action_sets[i] as *ActionSet;

            # if action_set.is_attached_to(self) {
            #     return xr.Result.ERROR_ACTIONSETS_ALREADY_ATTACHED;
            # }

            action_set.attach_to(self);
        }

        self.action_sets_attached = true;
        return xr.Result.SUCCESS;
    }

    pub func get_current_interaction_profile(self, state: *xr.InteractionProfileState) -> xr.Result {
        if !self.action_sets_attached {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }
        
        var path = self.instance.interaction_profile;
        var string = self.instance.path_mapping.get_string(path);

        log.info("Getting current interaction profile");

        if string.has_value {
            log.info("  Path: %", self.instance.path_mapping.get_string(path).value);
        } else {
            log.info("  Path: unknown");
        }

        state.interaction_profile = path;
        return xr.Result.SUCCESS;
    }

    pub func sync_actions(self, info: *xr.ActionsSyncInfo) -> xr.Result {
        # FIXME: Set `active` field corretly.
        
        for i in 0..info.count_active_action_sets {
            var action_set = info.active_action_sets[i].action_set as *ActionSet;

            if !action_set.is_attached_to(self) {
                return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
            }

            action_set.active = true;
        }

        if self.state != xr.SessionState.FOCUSED {
            return xr.Result.SESSION_NOT_FOCUSED;
        }

        try input_state in self.tracker_connection.poll() {
            self.input_state.headset.pose.position = input_state.headset.pose.position;
            self.input_state.headset.input_pitch = input_state.headset.input_pitch;
            self.input_state.headset.input_yaw = input_state.headset.input_yaw;
            self.input_state.left_controller = input_state.left_controller;
            self.input_state.right_controller = input_state.right_controller;
        }

        # Notify the application that it should query the current interaction profile when actions are first synced.
        if !self.actions_synced_once {
            var event_buffer: xr.EventDataBuffer;
            var event = &event_buffer as *xr.EventDataInteractionProfileChanged;
            event.type_ = xr.StructureType.EVENT_DATA_INTERACTION_PROFILE_CHANGED;
            event.next = null;
            event.session = self;
            self.instance.event_queue.push(event_buffer);

            self.actions_synced_once = true;
        }

        self.input_state.headset.update_pose();
        return xr.Result.SUCCESS;
    }

    pub func enumerate_bound_sources_for_action(self, info: *xr.BoundSourcesForActionEnumerateInfo) -> xr.Result {
        var action = info.action as *Action;

        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }

        return xr.Result.SUCCESS;
    }

    pub func get_input_source_localized_name(self, info: *xr.InputSourceLocalizedNameGetInfo) -> xr.Result {
        if !self.action_sets_attached {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }
        
        return xr.Result.SUCCESS;
    }

    pub func get_state_bool(self, info: *xr.ActionStateGetInfo, state: *xr.ActionStateBoolean) -> xr.Result {
        var action = info.action as *Action;

        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }

        var result = self.input_mapper.get_action_bool(action, info.subaction_path);

        state.changed_since_last_sync = 1;
        state.last_change_time = time.now();
        state.is_active = 1;

        if result.has_value {
            state.current_state = result.value;
        } else {
            state.current_state = 0;
        }

        return xr.Result.SUCCESS;
    }

    pub func get_state_float(self, info: *xr.ActionStateGetInfo, state: *xr.ActionStateFloat) -> xr.Result {
        var action = info.action as *Action;
        
        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }
        
        var result = self.input_mapper.get_action_float(action, info.subaction_path);

        state.changed_since_last_sync = 1;
        state.last_change_time = time.now();
        state.is_active = 1;

        if result.has_value {
            state.current_state = result.value;
        } else {
            state.current_state = 0.0;
        }

        return xr.Result.SUCCESS;
    }

    pub func get_state_vector2f(self, info: *xr.ActionStateGetInfo, state: *xr.ActionStateVector2f) -> xr.Result {
        var action = info.action as *Action;
        
        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }
        
        var result = self.input_mapper.get_action_vector2f(action, info.subaction_path);

        state.changed_since_last_sync = 1;
        state.last_change_time = time.now();
        state.is_active = 1;

        if result.has_value {
            state.current_state.x = result.value.x;
            state.current_state.y = result.value.y;
        } else {
            state.current_state.x = 0.0;
            state.current_state.y = 0.0;
        }

        return xr.Result.SUCCESS;
    }

    pub func get_state_pose(self, info: *xr.ActionStateGetInfo, state: *xr.ActionStatePose) -> xr.Result {
        var action = info.action as *Action;
        
        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }
        
        # FIXME
        state.is_active = 1;

        return xr.Result.SUCCESS;
    }

    pub func apply_haptic_feedback(self, info: *xr.HapticActionInfo, haptic_feedback: *xr.HapticBaseHeader) -> xr.Result {
        var action = info.action as *Action;
        
        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }

        if self.state != xr.SessionState.FOCUSED {
            return xr.Result.SESSION_NOT_FOCUSED;
        }
        
        return xr.Result.SUCCESS;
    }

    pub func stop_haptic_feedback(self, info: *xr.HapticActionInfo) -> xr.Result {
        var action = info.action as *Action;
        
        if !action.action_set.is_attached_to(self) {
            return xr.Result.ERROR_ACTIONSET_NOT_ATTACHED;
        }

        if self.state != xr.SessionState.FOCUSED {
            return xr.Result.SESSION_NOT_FOCUSED;
        }
        
        return xr.Result.SUCCESS;
    }

    pub func destroy(self) -> xr.Result {
        var lock = self.tracker_connection.mutex.lock();
        
        log.info("Destroying session");
        self.tracker_connection.stream.close();
        memory.free(self);
        return xr.Result.SUCCESS;
    }

    func transition_to(self, state: xr.SessionState) {
        var event_buffer: xr.EventDataBuffer;
        var event = &event_buffer as *xr.EventDataSessionStateChanged;
        event.type_ = xr.StructureType.EVENT_DATA_SESSION_STATE_CHANGED;
        event.next = null;
        event.session = self;
        event.state = state;
        event.time = time.now();
        self.instance.event_queue.push(event_buffer);

        self.state = state;
    }
}