use std.{
    memory,
    config,
    math.min,
};

meta if config.OS == config.WINDOWS {    
    use xr;
    use windows;

    use aethervr.{
        log,
        swapchain.{SwapchainImage, SwapchainImageState},
        graphics.{ImageRegion, ImageData},
        utils.{version, handle_buffer_size},
    };

    pub func get_requirements(reqs: *xr.GraphicsRequirementsD3D11KHR) -> xr.Result {
        var factory: *windows.IDXGIFactory;

        if windows.CreateDXGIFactory(&windows.IDXGIFactory_Guid, &factory as **void) != 0 {
            log.error("Failed to create DXGI factory");
        }

        var adapter: *windows.IDXGIAdapter;

        if factory.EnumAdapters(0, &adapter) != 0 {
            log.error("Failed to enumerate DXGI adapters");
        }

        log.info("DXGI adapters enumerated, picking first one");

        var desc: windows.DXGI_ADAPTER_DESC;

        if adapter.GetDesc(&desc) != 0 {
            log.error("Failed to get DXGI adapter description");
        }

        var luid = *(&desc.AdapterLuid as *u64);
        log.info("Using adapter with LUID %", luid);

        reqs.min_feature_level = windows.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_11_1 as u64;
        reqs.adapter_luid = luid;
        return xr.Result.SUCCESS;
    }

    pub func get_supported_formats() -> [i64] {
        return [
            windows.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM_SRGB as i64,
            windows.DXGI_FORMAT.DXGI_FORMAT_D16_UNORM as i64,
        ];
    }

    pub func create_swapchain_image(
        create_info: *xr.SwapchainCreateInfo,
        binding: *xr.GraphicsBindingD3D11KHR,
        swapchain_image: *SwapchainImage
    ) -> xr.Result {
        log.info("Creating D3D11 image");
        log.enter_scope();

        var device = binding.device as *windows.ID3D11Device;

        log.info("Usage flags:");
        log.enter_scope();

        var bind_flags: u32 = 0;

        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT) != 0 {
            log.info("- Color attachment");
            bind_flags |= windows.D3D11_BIND_RENDER_TARGET as u32;
        }
        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT) != 0 {
            log.info("- Depth/stencil attachment");
            bind_flags |= windows.D3D11_BIND_DEPTH_STENCIL as u32;
        }
        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT) != 0 {
            log.info("- Unordered access");
            bind_flags |= windows.D3D11_BIND_UNORDERED_ACCESS as u32;
        }
        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_TRANSFER_SRC_BIT) != 0 {
            log.info("- Transfer source (ignored)");
        }
        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_TRANSFER_DST_BIT) != 0 {
            log.info("- Transfer destination (ignored)");
        }
        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_SAMPLED_BIT) != 0 {
            log.info("- Sampled");
            bind_flags |= windows.D3D11_BIND_SHADER_RESOURCE as u32;
        }
        if (create_info.usage_flags & xr.SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT) != 0 {
            log.info("- Mutable (ignored)");
        }

        log.exit_scope();

        var typeless_format: windows.DXGI_FORMAT;

        if create_info.format as windows.DXGI_FORMAT == windows.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM_SRGB {
            typeless_format = windows.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_TYPELESS;
        } else {
            log.error("Invalid texture format");
        }

        var desc = windows.D3D11_TEXTURE2D_DESC {
            Width: create_info.width,
            Height: create_info.height,
            MipLevels: create_info.mip_count,
            ArraySize: create_info.array_size,
            Format: typeless_format,
            SampleDesc: windows.DXGI_SAMPLE_DESC {
                Count: create_info.sample_count,
                Quality: 0,
            },
            Usage: windows.D3D11_USAGE.D3D11_USAGE_DEFAULT,
            BindFlags: bind_flags,
            CPUAccessFlags: 0,
            MiscFlags:
                windows.D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX |
                windows.D3D11_RESOURCE_MISC_SHARED_NTHANDLE,
        };

        var texture: *windows.ID3D11Texture2D;

        if device.CreateTexture2D(&desc, null, &texture) != 0 {
            log.error("Failed to create texture");
        }

        *swapchain_image = SwapchainImage {
            id: 0,
            create_info: *create_info,
            api_handle: texture as usize,
            api_memory: null,
            api_opaque_values: [0, 0],
            state: SwapchainImageState.AVAILABLE,
        };

        log.exit_scope();
        return xr.Result.SUCCESS;
    }

    pub func wait_image(
        binding: *xr.GraphicsBindingD3D11KHR,
        image: *SwapchainImage,
        timeout: i64
    ) -> xr.Result {
        var texture = image.api_handle as *windows.ID3D11Texture2D;
        var keyed_mutex: *windows.IDXGIKeyedMutex;

        if texture.QueryInterface(&windows.IDXGIKeyedMutex_Guid, &keyed_mutex as **void) != 0 {
            log.error("D3D11: Failed to access keyed mutex of texture");
            return xr.Result.ERROR_RUNTIME_FAILURE;
        }

        var timeout_ms = (timeout / 1000000) as u32;
        var key: u64 = 0;
        var acquire_result: i32;

        for _ in 0..timeout_ms / 10 {
            acquire_result = keyed_mutex.AcquireSync(key, 10);

            if acquire_result != 0x102 {
                break;
            }

            if key == 0 {
                key = 1;
            } else {
                key = 0;
            }
        }

        if acquire_result == 0x102 {
            return xr.Result.TIMEOUT_EXPIRED;
        }

        if acquire_result != 0 {
            log.error("D3D11: Failed to acquire keyed mutex of swapchain image");
            return xr.Result.ERROR_RUNTIME_FAILURE;
        }

        return xr.Result.SUCCESS;
    }

    pub func release_image(
        binding: *xr.GraphicsBindingD3D11KHR,
        image: *SwapchainImage,
    ) {
        var texture = image.api_handle as *windows.ID3D11Texture2D;
        var keyed_mutex: *windows.IDXGIKeyedMutex;

        if texture.QueryInterface(&windows.IDXGIKeyedMutex_Guid, &keyed_mutex as **void) != 0 {
            log.error("D3D11: Failed to access keyed mutex of texture");
            return;
        }

        if keyed_mutex.ReleaseSync(1) != 0 {
            log.error("D3D11: Failed to release keyed mutex of swapchain image");
            return;
        }
    }

    pub func share_image(
        binding: *xr.GraphicsBindingD3D11KHR,
        image: *SwapchainImage,
    ) -> ?usize {
        var texture = image.api_handle as *windows.ID3D11Texture2D;
        var texture_resource: *windows.IDXGIResource1;

        if texture.QueryInterface(&windows.IDXGIResource1_Guid, &texture_resource as **void) != 0 {
            log.error("Failed to query resource interface of texture");
            return none;
        }

        var handle: addr = null;

        if texture_resource.CreateSharedHandle(null, windows.DXGI_SHARED_RESOURCE_READ, null, &handle) != 0 {
            log.error("Failed to share resource");
            return none;
        }

        log.info("Texture resource handle is %", handle as usize);

        return handle as usize;
    }
}