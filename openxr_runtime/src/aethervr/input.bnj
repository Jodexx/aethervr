use std.math;

use xr;

use aethervr.{
    time,
    log,
    session.Session,
    pose.{Pose, Quat},
};

struct PoseSnapshot {
    var pose: Pose;
    var timestamp: i64;
}

struct PoseBuffer {
    const NUM_SNAPSHOTS: u32 = 8;
    var snapshots: [PoseSnapshot; NUM_SNAPSHOTS];

    pub func new() -> PoseBuffer {
        var snapshots: [PoseSnapshot; NUM_SNAPSHOTS];

        for i in 0..NUM_SNAPSHOTS {
            snapshots[i] = PoseSnapshot {
                pose: Pose.identity(),
                timestamp: 0,
            };
        }

        return PoseBuffer { snapshots };
    }

    pub func insert(mut self, snapshot: PoseSnapshot) {
        for i in 0..NUM_SNAPSHOTS - 1 {
            self.snapshots[i] = self.snapshots[i + 1];
        }

        self.snapshots[NUM_SNAPSHOTS - 1] = snapshot;
    }

    pub func interpolate(self, timestamp: i64) -> Pose {
        if timestamp <= self.snapshots[0].timestamp {
            return self.snapshots[0].pose;
        } else if timestamp >= self.snapshots[NUM_SNAPSHOTS - 1].timestamp {
            return self.snapshots[NUM_SNAPSHOTS - 1].pose;
        }

        var index_before: u32 = 0;
        var index_after: u32 = 0;

        for i in 1 as u32..NUM_SNAPSHOTS {
            if self.snapshots[i].timestamp > timestamp {
                index_after = i;
                index_before = i - 1;
            }
        }

        var before = self.snapshots[index_before];
        var after = self.snapshots[index_after];
        var t = (timestamp - before.timestamp) as f32 / (after.timestamp - before.timestamp) as f32;

        return Pose.interpolate(before.pose, after.pose, t);
    }
}

struct HeadsetState {
    var pose: Pose;

    var input_pitch: f32;
    var input_yaw: f32;
    var pitch: f32;
    var yaw: f32;
    var last_time: i64;

    pub func new() -> HeadsetState {
        return HeadsetState {
            pose: Pose.identity(),
            input_pitch: 0.0,
            input_yaw: 0.0,
            pitch: 0.0,
            yaw: 0.0,
            last_time: time.now(),
        };
    }

    pub func update_pose(mut self) {
        var now = time.now();
        var delta_ns = now - self.last_time;
        var delta = delta_ns as f32 / 1000000000 as f32;
        self.last_time = now;

        self.pitch += delta * 3.0 * self.input_pitch;
        self.yaw += delta * 3.0 * self.input_yaw;

        var view_orientation_pitch = Quat.axis_angle(math.deg2rad(self.pitch), 1.0, 0.0, 0.0);
        var view_orientation_yaw = Quat.axis_angle(math.deg2rad(self.yaw), 0.0, 1.0, 0.0);
        self.pose.orientation = view_orientation_yaw * view_orientation_pitch;
    }
}

struct ControllerState {
    var pose_buffer: PoseBuffer;
    var trigger_presed: bool;
    var squeeze_pressed: bool;
    var a_pressed: bool;
    var b_pressed: bool;
    var x_pressed: bool;
    var y_pressed: bool;
    var menu_pressed: bool;
    var system_pressed: bool;
    var thumbstick_pressed: bool;
    var thumbstick_x: f32;
    var thumbstick_y: f32;

    pub func new() -> ControllerState {
        return ControllerState {
            pose_buffer: PoseBuffer.new(),
            trigger_presed: false,
            squeeze_pressed: false,
            a_pressed: false,
            b_pressed: false,
            x_pressed: false,
            y_pressed: false,
            menu_pressed: false,
            system_pressed: false,
            thumbstick_pressed: false,
            thumbstick_x: 0.0,
            thumbstick_y: 0.0,
        };
    }
}

struct InputState {
    var headset: HeadsetState;
    var left_controller: ControllerState;
    var right_controller: ControllerState;

    pub func new() -> InputState {
        return InputState {
            headset: HeadsetState.new(),
            left_controller: ControllerState.new(),
            right_controller: ControllerState.new(),
        };
    }
}
