use std.{
    memory,
    math,
    convert.to_string,
};

use xr;

use aethervr.{
    pose,
    input,
    log,
    utils,
    session.Session,
    action.Action,
    pose.Pose,
};

enum SpaceType {
    REFERENCE_SPACE,
    ACTION_SPACE
}

struct Space {
    var session: *Session;
    var type_: SpaceType;

    var reference_space_type: xr.ReferenceSpaceType;
    var action: *Action;
    var subaction_path: u64;

    var location: xr.Posef; 
    var pose_in_action_space: Pose;

    func create_reference_space(
        session: *Session,
        create_info: *xr.ReferenceSpaceCreateInfo
    ) -> (*Space, xr.Result) {
        log.info("Creating reference space");

        # TODO: Move this into the session
        if create_info.reference_space_type != xr.ReferenceSpaceType.VIEW &&
           create_info.reference_space_type != xr.ReferenceSpaceType.LOCAL &&
           create_info.reference_space_type != xr.ReferenceSpaceType.STAGE {
            log.info("Reference space type not supported");
            return (null, xr.Result.ERROR_REFERENCE_SPACE_UNSUPPORTED);
        }

        if !utils.is_orientation_valid(create_info.pose_in_reference_space.orientation) {
            return (null, xr.Result.ERROR_POSE_INVALID);
        }

        log.info("  Type: %", to_string(&create_info.reference_space_type));

        var space = memory.box(Space {
            session,
            type_: SpaceType.REFERENCE_SPACE,
            reference_space_type: create_info.reference_space_type,
            action: undefined,
            subaction_path: undefined,
            location: {
                orientation: { x: 0.0, y: 0.0, z: 0.0, w: 1.0 },
                position: { x: 0.0, y: 0.0, z: 0.0 }
            },
            pose_in_action_space: {
                orientation: { x: 0.0, y: 0.0, z: 0.0, w: 1.0 },
                position: { x: 0.0, y: 0.0, z: 0.0 }
            },
        });

        return (space, xr.Result.SUCCESS);
    }

    pub func create_action_space(
        session: *Session,
        create_info: *xr.ActionSpaceCreateInfo
    ) -> (*Space, xr.Result) {
        log.info("Creating action space");
        log.enter_scope();

        var action = create_info.action as *Action;
        var subaction_path = create_info.subaction_path;

        # log.info("Action: %", action.name.copy());
        # log.info("Subaction path: %", session.instance.path_mapping.get_string(subaction_path).value);

        var space = memory.box(Space {
            session,
            type_: SpaceType.ACTION_SPACE,
            reference_space_type: undefined,
            action,
            subaction_path,
            location: {
                orientation: { x: 0.0, y: 0.0, z: 0.0, w: 1.0 },
                position: { x: 0.0, y: 0.0, z: 0.0 },
            },
            pose_in_action_space: {
                position: {
                    x: create_info.pose_in_action_space.position.x,
                    y: create_info.pose_in_action_space.position.y,
                    z: create_info.pose_in_action_space.position.z,
                },
                orientation: {
                    x: create_info.pose_in_action_space.orientation.x,
                    y: create_info.pose_in_action_space.orientation.y,
                    z: create_info.pose_in_action_space.orientation.z,
                    w: create_info.pose_in_action_space.orientation.w,
                },
            },
        });

        log.exit_scope();
        return (space, xr.Result.SUCCESS);
    }

    pub func destroy(space: *Space) -> xr.Result {
        log.info("Destroying space");
        memory.free(space);
        return xr.Result.SUCCESS;
    }

    pub func locate(self, base: *Space, time: i64, location: *xr.SpaceLocation) -> xr.Result {
        if time <= 0 {
            return xr.Result.ERROR_TIME_INVALID;
        }
        
        location.pose = base.get_relative_pose(self.locate_in_world_space(time), time).to_xr();

        location.location_flags =
            xr.SPACE_LOCATION_ORIENTATION_VALID_BIT |
            xr.SPACE_LOCATION_POSITION_VALID_BIT |
            xr.SPACE_LOCATION_ORIENTATION_TRACKED_BIT |
            xr.SPACE_LOCATION_POSITION_TRACKED_BIT;

        return xr.Result.SUCCESS;
    }

    pub func locate_in_world_space(self, time: i64) -> Pose {
        if self.type_ == SpaceType.REFERENCE_SPACE {
            if self.reference_space_type == xr.ReferenceSpaceType.VIEW {
                return self.session.input_state.headset.pose;
            } else if self.reference_space_type == xr.ReferenceSpaceType.LOCAL {
                return Pose.identity();
            } else if self.reference_space_type == xr.ReferenceSpaceType.STAGE {
                return Pose.identity();
            } else {
                # Probably unreachable.
                return Pose.identity();
            }
        } else if self.type_ == SpaceType.ACTION_SPACE {
            var space_pose = self.session.input_mapper.get_space_pose(self.action, self.subaction_path, time);
            return space_pose * self.pose_in_action_space;
        } else {
            return Pose.identity();
        }
    }

    pub func get_relative_pose(self, p: Pose, time: i64) -> Pose {
        return Pose.relative(self.locate_in_world_space(time), p);
    }
}