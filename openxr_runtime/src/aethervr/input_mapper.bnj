use std.math;

use xr;

use aethervr.{
    log,
    pose,
    session.Session,
    path.PathMapping,
    input.{InputState, ControllerState},
    action.Action,
    action_binding.{ActionBinding, Device, Identifier, Kind},
    pose.{Pose, Quat},
};

struct InputMapper {
    var path_mapping: *PathMapping;
    var state: *InputState;

    func new(session: *Session) -> InputMapper {
        return {
            path_mapping: &session.instance.path_mapping,
            state: &session.input_state,
        };
    }

    pub func get_space_pose(self, action: *Action, subaction_path: u64, time: i64) -> Pose {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_controller_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == Identifier.GRIP || binding.identifier == Identifier.AIM {
                if binding.kind == Kind.POSE {
                    var pose = hand_state.value.pose_buffer.interpolate(time);
                    pose = self.state.headset.pose * pose;
                    return pose;
                }
            }
        }

        return Pose.identity();
    }

    pub func get_action_bool(self, action: *Action, subaction_path: u64) -> ?u32 {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_controller_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == Identifier.TRIGGER {
                if hand_state.value.trigger_presed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.SQUEEZE {
                if hand_state.value.squeeze_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.A_BUTTON {
                if hand_state.value.a_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.B_BUTTON {
                if hand_state.value.b_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.X_BUTTON {
                if hand_state.value.x_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.Y_BUTTON {
                if hand_state.value.y_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.MENU {
                if hand_state.value.menu_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.SYSTEM {
                if hand_state.value.system_pressed { return 1; } else { return 0; }
            } else if binding.identifier == Identifier.THUMBSTICK {
                if hand_state.value.thumbstick_pressed { return 1; } else { return 0; }
            }
        }

        return none;
    }

    pub func get_action_float(self, action: *Action, subaction_path: u64) -> ?f32 {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_controller_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == Identifier.TRIGGER {
                if hand_state.value.trigger_presed { return 1.0; } else { return 0.0; }
            } else if binding.identifier == Identifier.SQUEEZE {
                if hand_state.value.squeeze_pressed { return 1.0; } else { return 0.0; }
            } else if binding.identifier == Identifier.THUMBSTICK {
                if hand_state.value.thumbstick_pressed { return 1.0; } else { return 0.0; }
            }
        }

        return none;
    }

    pub func get_action_vector2f(self, action: *Action, subaction_path: u64) -> ?xr.Vector2f {
        var binding = self.get_concrete_binding(action.binding, subaction_path);
        var hand_state = self.get_controller_state(binding.device);

        if hand_state.has_value {
            if binding.identifier == Identifier.THUMBSTICK {
                return xr.Vector2f {
                    x: hand_state.value.thumbstick_x,
                    y: hand_state.value.thumbstick_y,
                };
            }
        }

        return none;
    }

    func get_concrete_binding(self, binding: ActionBinding, subaction_path: u64) -> ActionBinding {
        return {
            device: self.get_concrete_device(binding.device, subaction_path),
            identifier: binding.identifier,
            kind: binding.kind,
        };
    }

    func get_concrete_device(self, device: Device, subaction_path: u64) -> Device {
        if device == Device.ANY_HAND {
            if self.path_mapping.is_path(subaction_path, "/user/hand/left") {
                return Device.LEFT_HAND;
            } else if self.path_mapping.is_path(subaction_path, "/user/hand/right") {
                return Device.RIGHT_HAND;
            } else {
                return Device.NONE;
            }
        }

        return device;
    }

    func get_controller_state(self, device: Device) -> ?*ControllerState {
        if device == Device.LEFT_HAND {
            return &self.state.left_controller;
        } else if device == Device.RIGHT_HAND {
            return &self.state.right_controller;
        } else {
            return none;
        }
    }
}