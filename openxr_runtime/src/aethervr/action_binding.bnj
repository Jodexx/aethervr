use xr;

use aethervr.{
    log,
    instance.Instance,
    action.Action,
    utils.streq as eq,
};

enum Device {
    NONE,
    LEFT_HAND,
    RIGHT_HAND,
    ANY_HAND,
    HEAD,
    GAMEPAD,
}

enum Identifier {
    NONE,
    GRIP,
    AIM,
    THUMBSTICK,
    TRIGGER,
    SQUEEZE,
    A_BUTTON,
    B_BUTTON,
    X_BUTTON,
    Y_BUTTON,
    MENU,
    SYSTEM,
}

enum Kind {
    NONE,
    CLICK,
    TOUCH,
    FORCE,
    VALUE,
    X,
    Y,
    POSE,
}

struct ActionBinding {
    var device: Device;
    var identifier: Identifier;
    var kind: Kind;
}

struct Component {
    var user_path: ?String;
    var sub_path: String;
    var identifier: Identifier;
    var kind: Kind;

    pub func new(user_path: String, sub_path: String, identifier: Identifier, kind: Kind) -> Component {
        return Component {
            user_path,
            sub_path,
            identifier,
            kind,
        };
    }

    pub func new(sub_path: String, identifier: Identifier, kind: Kind) -> Component {
        return Component {
            user_path: none,
            sub_path,
            identifier,
            kind,
        };
    }

    pub func new(sub_path: String) -> Component {
        return Component {
            user_path: none,
            sub_path,
            identifier: Identifier.NONE,
            kind: Kind.NONE,
        };
    }

    pub func matches(self, binding: StringSlice, type_: xr.ActionType) -> bool {
        if self.user_path.has_value {
            if !binding.starts_with(self.user_path.value.slice()) {
                return false;
            }
        }

        var sub_path: StringSlice;

        if binding.starts_with("/user/hand/left") {
            sub_path = binding.substring(15, binding.length);
        } else if binding.starts_with("/user/hand/right") {
            sub_path = binding.substring(16, binding.length);
        } else if binding.starts_with("/user/head") {
            sub_path = binding.substring(10, binding.length);
        } else if binding.starts_with("/user/gamepad") {
            sub_path = binding.substring(13, binding.length);
        } else {
            return false;
        }

        if self.sub_path.ends_with("/x") || self.sub_path.ends_with("/y") {
            var parent = self.sub_path.substring(0, self.sub_path.rfind('/').unwrap());

            if sub_path == parent.slice() {
                return true;
            }
        }

        if sub_path != self.sub_path.slice() {
            return false;
        }

        return true;
    }
}

struct InteractionProfile {
    var path: String;
    var device: Device;
    var components: Array[Component];

    pub func all() -> Array[InteractionProfile] {
        return [
            {
                path: "/interaction_profiles/khr/simple_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/input/select/click"),
                    Component.new("/input/menu/click", Identifier.MENU, Kind.CLICK),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                    Component.new("/output/haptic"),
                ],
            },
            {
                path: "/interaction_profiles/google/daydream_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/input/select/click"),
                    Component.new("/input/trackpad/x"),
                    Component.new("/input/trackpad/y"),
                    Component.new("/input/trackpad/click"),
                    Component.new("/input/trackpad/touch"),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                ],
            },
            {
                path: "/interaction_profiles/htc/vive_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/input/system/click", Identifier.SYSTEM, Kind.CLICK),
                    Component.new("/input/squeeze/click", Identifier.SQUEEZE, Kind.CLICK),
                    Component.new("/input/menu/click", Identifier.MENU, Kind.CLICK),
                    Component.new("/input/trigger/click", Identifier.TRIGGER, Kind.CLICK),
                    Component.new("/input/trigger/value", Identifier.TRIGGER, Kind.VALUE),
                    Component.new("/input/trackpad/x"),
                    Component.new("/input/trackpad/y"),
                    Component.new("/input/trackpad/click"),
                    Component.new("/input/trackpad/touch"),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                    Component.new("/output/haptic"),
                ],
            },
            {
                path: "/interaction_profiles/htc/vive_pro",
                device: Device.HEAD,
                components: [
                    Component.new("/input/system/click", Identifier.SYSTEM, Kind.CLICK),
                    Component.new("/input/volume_up/click"),
                    Component.new("/input/volume_down/click"),
                    Component.new("/input/mute_mic/click"),
                ],
            },
            {
                path: "/interaction_profiles/microsoft/motion_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/input/menu/click", Identifier.MENU, Kind.CLICK),
                    Component.new("/input/squeeze/click", Identifier.SQUEEZE, Kind.CLICK),
                    Component.new("/input/trigger/value", Identifier.TRIGGER, Kind.VALUE),
                    Component.new("/input/thumbstick/x", Identifier.THUMBSTICK, Kind.X),
                    Component.new("/input/thumbstick/y", Identifier.THUMBSTICK, Kind.Y),
                    Component.new("/input/thumbstick/click", Identifier.THUMBSTICK, Kind.CLICK),
                    Component.new("/input/trackpad/x"),
                    Component.new("/input/trackpad/y"),
                    Component.new("/input/trackpad/click"),
                    Component.new("/input/trackpad/touch"),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                    Component.new("/output/haptic"),
                ],
            },
            {
                path: "/interaction_profiles/microsoft/xbox_controller",
                device: Device.GAMEPAD,
                components: [
                    Component.new("/input/menu/click"),
                    Component.new("/input/view/click"),
                    Component.new("/input/a/click"),
                    Component.new("/input/b/click"),
                    Component.new("/input/x/click"),
                    Component.new("/input/y/click"),
                    Component.new("/input/dpad_down/click"),
                    Component.new("/input/dpad_right/click"),
                    Component.new("/input/dpad_up/click"),
                    Component.new("/input/dpad_left/click"),
                    Component.new("/input/shoulder_left/click"),
                    Component.new("/input/shoulder_right/click"),
                    Component.new("/input/thumbstick_left/click"),
                    Component.new("/input/thumbstick_right/click"),
                    Component.new("/input/trigger_left/value"),
                    Component.new("/input/trigger_right/value"),
                    Component.new("/input/thumbstick_left/x"),
                    Component.new("/input/thumbstick_left/y"),
                    Component.new("/input/thumbstick_right/x"),
                    Component.new("/input/thumbstick_right/y"),
                    Component.new("/output/haptic_left"),
                    Component.new("/output/haptic_right"),
                    Component.new("/output/haptic_left_trigger"),
                    Component.new("/output/haptic_right_trigger"),
                ],
            },
            {
                path: "/interaction_profiles/oculus/go_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/input/system/click", Identifier.SYSTEM, Kind.CLICK),
                    Component.new("/input/trigger/click", Identifier.TRIGGER, Kind.CLICK),
                    Component.new("/input/back/click"),
                    Component.new("/input/trackpad/x"),
                    Component.new("/input/trackpad/y"),
                    Component.new("/input/trackpad/click"),
                    Component.new("/input/trackpad/touch"),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                ],
            },
            {
                path: "/interaction_profiles/oculus/touch_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/user/hand/left", "/input/x/click", Identifier.X_BUTTON, Kind.CLICK),
                    Component.new("/user/hand/left", "/input/x/touch", Identifier.X_BUTTON, Kind.TOUCH),
                    Component.new("/user/hand/left", "/input/y/click", Identifier.Y_BUTTON, Kind.CLICK),
                    Component.new("/user/hand/left", "/input/y/touch", Identifier.Y_BUTTON, Kind.TOUCH),
                    Component.new("/user/hand/left", "/input/menu/click", Identifier.MENU, Kind.CLICK),
                    Component.new("/user/hand/right", "/input/a/click", Identifier.A_BUTTON, Kind.CLICK),
                    Component.new("/user/hand/right", "/input/a/touch", Identifier.A_BUTTON, Kind.TOUCH),
                    Component.new("/user/hand/right", "/input/b/click", Identifier.B_BUTTON, Kind.CLICK),
                    Component.new("/user/hand/right", "/input/b/touch", Identifier.B_BUTTON, Kind.TOUCH),
                    Component.new("/user/hand/right", "/input/system/click", Identifier.SYSTEM, Kind.CLICK),
                    Component.new("/input/squeeze/value", Identifier.SQUEEZE, Kind.VALUE),
                    Component.new("/input/trigger/value", Identifier.TRIGGER, Kind.VALUE),
                    Component.new("/input/trigger/touch", Identifier.TRIGGER, Kind.TOUCH),
                    Component.new("/input/thumbstick/x", Identifier.THUMBSTICK, Kind.X),
                    Component.new("/input/thumbstick/y", Identifier.THUMBSTICK, Kind.Y),
                    Component.new("/input/thumbstick/click", Identifier.THUMBSTICK, Kind.CLICK),
                    Component.new("/input/thumbstick/touch", Identifier.THUMBSTICK, Kind.TOUCH),
                    Component.new("/input/thumbrest/touch"),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                    Component.new("/output/haptic"),
                ],
            },
            {
                path: "/interaction_profiles/valve/index_controller",
                device: Device.ANY_HAND,
                components: [
                    Component.new("/input/system/click", Identifier.SYSTEM, Kind.CLICK),
                    Component.new("/input/system/touch", Identifier.SYSTEM, Kind.TOUCH),
                    Component.new("/input/a/click", Identifier.A_BUTTON, Kind.CLICK),
                    Component.new("/input/a/touch", Identifier.A_BUTTON, Kind.TOUCH),
                    Component.new("/input/b/click", Identifier.B_BUTTON, Kind.CLICK),
                    Component.new("/input/b/touch", Identifier.B_BUTTON, Kind.TOUCH),
                    Component.new("/input/squeeze/value", Identifier.SQUEEZE, Kind.VALUE),
                    Component.new("/input/squeeze/force", Identifier.SQUEEZE, Kind.FORCE),
                    Component.new("/input/trigger/click", Identifier.TRIGGER, Kind.CLICK),
                    Component.new("/input/trigger/value", Identifier.TRIGGER, Kind.VALUE),
                    Component.new("/input/trigger/touch", Identifier.TRIGGER, Kind.TOUCH),
                    Component.new("/input/thumbstick/x", Identifier.THUMBSTICK, Kind.X),
                    Component.new("/input/thumbstick/y", Identifier.THUMBSTICK, Kind.Y),
                    Component.new("/input/thumbstick/click", Identifier.THUMBSTICK, Kind.CLICK),
                    Component.new("/input/thumbstick/touch", Identifier.THUMBSTICK, Kind.TOUCH),
                    Component.new("/input/trackpad/x"),
                    Component.new("/input/trackpad/y"),
                    Component.new("/input/trackpad/force"),
                    Component.new("/input/trackpad/touch"),
                    Component.new("/input/grip/pose", Identifier.GRIP, Kind.POSE),
                    Component.new("/input/aim/pose", Identifier.AIM, Kind.POSE),
                    Component.new("/output/haptic"),
                ],
            }
        ];
    }
}

pub func set_action_bindings(
    instance: *Instance,
    suggested_bindings: *xr.InteractionProfileSuggestedBinding
) -> xr.Result {
    log.info("Suggesting interaction profile bindings");
    log.enter_scope();

    var profile_path = instance.path_mapping.get_string(suggested_bindings.interaction_profile).unwrap();
    log.info("Interaction Profile: %", profile_path);

    var profile = find_profile(instance, profile_path);
    if profile == null {
        log.info("Profile is unsupported");
        log.exit_scope();
        return xr.Result.ERROR_PATH_UNSUPPORTED;
    }

    var is_used = profile_path == "/interaction_profiles/oculus/touch_controller";

    if is_used {
        instance.interaction_profile = suggested_bindings.interaction_profile;
    }

    log.info("Suggested bindings:");
    log.enter_scope();

    var actions = Set[*Action].new();

    for i in 0..suggested_bindings.count_suggested_bindings {
        var binding = suggested_bindings.suggested_bindings[i];
        var action = binding.action as *Action;
        var path = binding.binding;

        var string = instance.path_mapping.get_string(path).unwrap();

        log.info("- % -> %", action.name.copy(), string);

        var component: *Component = null;

        for ref mut candidate in profile.components {
            if candidate.matches(string, action.type_) {
                component = &candidate;
                break;
            }
        }

        if component == null {
            log.exit_scope();
            log.exit_scope();
            return xr.Result.ERROR_PATH_UNSUPPORTED;
        }

        if !is_used {
            continue;
        }

        if action.binding.device == Device.LEFT_HAND || action.binding.device == Device.RIGHT_HAND {
            # If an action has already been bound to a hand, bind it to any hand.
            action.binding.device = Device.ANY_HAND;
        } else if string.starts_with("/user/hand/left") {
            action.binding.device = Device.LEFT_HAND;
        }  else if string.starts_with("/user/hand/right") {
            action.binding.device = Device.RIGHT_HAND;
        } else if string.starts_with("/user/head") {
            action.binding.device = Device.HEAD;
        } else if string.starts_with("/user/gamepad") {
            action.binding.device = Device.GAMEPAD;
        }

        action.binding.identifier = component.identifier;
        action.binding.kind = component.kind;

        actions.insert(action);
    }

    log.exit_scope();

    if is_used {
        log.info("Resulting bindings:");
        log.enter_scope();

        for action in actions.elements {
            var binding_str = String.new();

            if action.binding.device == Device.NONE { binding_str.append("none."); }
            else if action.binding.device == Device.HEAD { binding_str.append("head."); }
            else if action.binding.device == Device.LEFT_HAND { binding_str.append("left_hand."); }
            else if action.binding.device == Device.RIGHT_HAND { binding_str.append("right_hand."); }
            else if action.binding.device == Device.ANY_HAND { binding_str.append("any_hand."); }

            if action.binding.identifier == Identifier.NONE { binding_str.append("none."); }
            else if action.binding.identifier == Identifier.GRIP { binding_str.append("grip."); }
            else if action.binding.identifier == Identifier.AIM { binding_str.append("aim."); }
            else if action.binding.identifier == Identifier.THUMBSTICK { binding_str.append("thumbstick."); }
            else if action.binding.identifier == Identifier.TRIGGER { binding_str.append("trigger."); }
            else if action.binding.identifier == Identifier.SQUEEZE { binding_str.append("squeeze."); }
            else if action.binding.identifier == Identifier.A_BUTTON { binding_str.append("a."); }
            else if action.binding.identifier == Identifier.B_BUTTON { binding_str.append("b."); }
            else if action.binding.identifier == Identifier.X_BUTTON { binding_str.append("x."); }
            else if action.binding.identifier == Identifier.Y_BUTTON { binding_str.append("y."); }
            else if action.binding.identifier == Identifier.MENU { binding_str.append("menu."); }
            else if action.binding.identifier == Identifier.SYSTEM { binding_str.append("system."); }

            if action.binding.kind == Kind.NONE { binding_str.append("none"); }
            else if action.binding.kind == Kind.CLICK { binding_str.append("click"); }
            else if action.binding.kind == Kind.TOUCH { binding_str.append("touch"); }
            else if action.binding.kind == Kind.FORCE { binding_str.append("force"); }
            else if action.binding.kind == Kind.VALUE { binding_str.append("value"); }
            else if action.binding.kind == Kind.POSE { binding_str.append("pose"); }

            log.info("%: %", action.name.copy(), binding_str);
        }

        log.exit_scope();
    } else {
        log.info("Bindings for this interaction profile are ignored");
    }
    
    log.exit_scope();
    
    return xr.Result.SUCCESS;
}

func find_profile(instance: *Instance, path: StringSlice) -> *InteractionProfile {
    for ref mut profile in instance.interaction_profiles {
        if profile.path == path {
            return &profile;
        }
    }

    return null;
}
