use std.{
    memory,
    file.File,
    path.Path,
    convert.to_string,
};

struct Logger {
    var file: File;
    var depth: u32;
}

var instance: Logger;

func create_instance(path: Path) {
    instance.file = File.open(path, File.Mode.WRITE).unwrap();
    instance.depth = 0;
}

pub func info[Args: ...](format: String, args: Args) {
    var string = "";

    var i: usize = 0;

    meta for arg in args {
        while i < format.length() && format.bytes()[i] != '%' {
            string.append(format.bytes()[i]);
            i += 1;
        }

        string.append(to_string(&arg));
        i += 1;
    }

    while i < format.length() {
        string.append(format.bytes()[i]);
        i += 1;
    }

    instance.file.write_cstring("[info ] ");

    for i in 0..instance.depth {
        instance.file.write_cstring("  ");
    }

    instance.file.write_string(string.slice());
    instance.file.write_cstring("\n");
    instance.file.flush();
}

pub func warn(message: String) {
    instance.file.write_cstring("[warn ] ");

    for i in 0..instance.depth {
        instance.file.write_cstring("  ");
    }

    instance.file.write_string(message.slice());
    instance.file.write_cstring("\n");
    instance.file.flush();
}

pub func error(message: String) {
    instance.file.write_cstring("[ERROR] ");
    instance.file.write_string(message.slice());
    instance.file.write_cstring("\n");
    instance.file.flush();
}

pub func enter_scope() {
    instance.depth += 1;
}

pub func exit_scope() {
    instance.depth -= 1;
}
