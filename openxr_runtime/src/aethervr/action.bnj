use std.{
    memory,
    convert.to_string,
};

use xr;

use aethervr.{
    time,
    log,
    instance.Instance,
    session.Session,
    action_binding.{Device, Identifier, Kind, ActionBinding},
    utils.streq,
};

struct ActionSet {
    var instance: *Instance;
    var active: bool;
    var sessions: Set[*Session];

    pub func create(instance: *Instance, create_info: *xr.ActionSetCreateInfo) -> (*ActionSet, xr.Result) {
        log.info("Creating action set");
        log.enter_scope();
        log.info("Name: %", &create_info.action_set_name as *u8);
        log.info("Localized Name: %", &create_info.localized_action_set_name as *u8);
        log.info("Priority: %", create_info.priority);
        log.exit_scope();

        var action_set = memory.box(ActionSet {
            instance,
            active: false,
            sessions: Set[*Session].new(),
        });

        return (action_set, xr.Result.SUCCESS);
    }

    pub func destroy(action_set: *ActionSet) -> xr.Result {
        log.info("Destroying action set");
        memory.free(action_set);
        return xr.Result.SUCCESS;
    }

    pub func is_attached_to(self, session: *Session) -> bool {
        return self.sessions.contains(session);
    }

    pub func attach_to(mut self, session: *Session) {
        self.sessions.insert(session);
    }

    pub func create_action(mut self, create_info: *xr.ActionCreateInfo) -> (*Action, xr.Result) {
        return Action.create(&self, create_info);
    }
}

struct Action {
    var action_set: *ActionSet;
    var name: String;
    var type_: xr.ActionType;
    var binding: ActionBinding;

    pub func create(action_set: *ActionSet, create_info: *xr.ActionCreateInfo) -> (*Action, xr.Result) {
        # if action_set.sessions.elements.length > 0 {
        #     return (null, xr.Result.ERROR_ACTIONSETS_ALREADY_ATTACHED);
        # }
        
        log.info("Creating action");
        log.info("  Name: %", &create_info.action_name as *u8);

        if create_info.action_type == xr.ActionType.BOOLEAN_INPUT {
            log.info("  Type: XR_ACTION_TYPE_BOOLEAN_INPUT");
        } else if create_info.action_type == xr.ActionType.FLOAT_INPUT {
            log.info("  Type: XR_ACTION_TYPE_FLOAT_INPUT");
        } else if create_info.action_type == xr.ActionType.VECTOR2F_INPUT {
            log.info("  Type: XR_ACTION_TYPE_VECTOR2F_INPUT");
        } else if create_info.action_type == xr.ActionType.POSE_INPUT {
            log.info("  Type: XR_ACTION_TYPE_POSE_INPUT");
        } if create_info.action_type == xr.ActionType.VIBRATION_OUTPUT {
            log.info("  Type: XR_ACTION_TYPE_VIBRATION_OUTPUT");
        }

        log.info("  Localized Name: %", &create_info.localized_action_name as *u8);

        if create_info.count_subaction_paths != 0 {
            log.info("  Subaction paths:");

            for i in 0..create_info.count_subaction_paths {
                var path = create_info.subaction_paths[i];

                try string in action_set.instance.path_mapping.get_string(path) {
                    log.info("    - %", string);
                }
            }
        }

        var action = memory.box(Action {
            action_set,
            name: String.from_cstr(&create_info.action_name as *u8),
            type_: create_info.action_type,
            binding: {
                device: Device.NONE,
                identifier: Identifier.NONE,
                kind: Kind.NONE,
            },
        });

        return (action, xr.Result.SUCCESS);
    }

    pub func destroy(action: *Action) -> xr.Result {
        log.info("Destroying action %", action.name.copy());
        memory.free(action);
        return xr.Result.SUCCESS;
    }
}