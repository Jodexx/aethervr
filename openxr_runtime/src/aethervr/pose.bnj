use std.{math, test.assert_eq};

use xr;

struct Vec3 {
    var x: f32;
    var y: f32;
    var z: f32;

    pub func new(x: f32, y: f32, z: f32) -> Vec3 {
        return Vec3 { x, y, z };
    }

    pub func zero() -> Vec3 {
        return new(0.0, 0.0, 0.0);
    }

    pub func dot(v1: Vec3, v2: Vec3) -> f32 {
        return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
    }

    pub func cross(v1: Vec3, v2: Vec3) -> Vec3 {
        # Thanks to: https://en.wikipedia.org/wiki/Cross_product

        return new(
            v1.y * v2.z - v1.z * v2.y,
            v1.z * v2.x - v1.x * v2.z,
            v1.x * v2.y - v1.y * v2.x
        );
    }

    pub func lerp(a: Vec3, b: Vec3, t: f32) -> Vec3 {
        return new(
            a.x + t * (b.x - a.x),
            a.y + t * (b.y - a.y),
            a.z + t * (b.z - a.z),
        );
    }

    pub func to_xr(self) -> xr.Vector3f {
        return xr.Vector3f {
            x: self.x,
            y: self.y,
            z: self.z,
        };
    }

    pub func __add__(self, rhs: Vec3) -> Vec3 {
        return Vec3 {
            x: self.x + rhs.x,
            y: self.y + rhs.y,
            z: self.z + rhs.z,
        };
    }

    pub func __sub__(self, rhs: Vec3) -> Vec3 {
        return Vec3 {
            x: self.x - rhs.x,
            y: self.y - rhs.y,
            z: self.z - rhs.z,
        };
    }
}

struct Quat {
    var x: f32;
    var y: f32;
    var z: f32;
    var w: f32;

    pub func new(x: f32, y: f32, z: f32, w: f32) -> Quat {
        return Quat { x, y, z, w };
    }

    pub func identity() -> Quat {
        return new(0.0, 0.0, 0.0, 1.0);
    }

    pub func axis_angle(angle: f32, x: f32, y: f32, z: f32) -> Quat {
        var s = math.sin(0.5 * angle);
        var c = math.cos(0.5 * angle);
        return new(x * s, y * s, z * s, c);
    }

    pub func slerp(a: Quat, b: Quat, t: f32) -> Quat {
        # Thanks to: https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/index.htm
        
        var cos_half_theta = a.w * b.w + a.x * b.x + a.y * b.y + a.z * b.z;
        if cos_half_theta <= -1.0 || cos_half_theta >= 1.0 {
            return a;
        }

        var half_theta = math.acos(cos_half_theta);
        var sin_half_theta = math.sqrt(1.0 - cos_half_theta * cos_half_theta);

        if math.abs(sin_half_theta) < 0.001 {
            return Quat.new(
                0.5 * a.x + 0.5 * b.x,
                0.5 * a.y + 0.5 * b.y,
                0.5 * a.z + 0.5 * b.z,
                0.5 * a.w + 0.5 * b.w,
            );
        }

        var fa = math.sin((1.0 - t) * half_theta) / sin_half_theta;
        var fb = math.sin(t * half_theta) / sin_half_theta;

        return Quat.new(
            fa * a.x + fb * b.x,
            fa * a.y + fb * b.y,
            fa * a.z + fb * b.z,
            fa * a.w + fb * b.w,
        );
    }

    pub func inverse(self) -> Quat {
        return new(-self.x, -self.y, -self.z, self.w);
    }

    pub func rotate(self, vector: Vec3) -> Vec3 {
        # Thanks to: https://gamedev.stackexchange.com/questions/28395/rotating-vector3-by-a-quaternion

        var u = new(vector.x, vector.y, vector.z, 0.0);
        var q = (self * u) * self.inverse();
        return Vec3.new(q.x, q.y, q.z);
    }

    pub func to_xr(self) -> xr.Quaternionf {
        return xr.Quaternionf {
            x: self.x,
            y: self.y,
            z: self.z,
            w: self.w,
        };
    }

    pub func __mul__(self, rhs: Quat) -> Quat {
        return new(
             self.x * rhs.w + self.y * rhs.z - self.z * rhs.y + self.w * rhs.x,
            -self.x * rhs.z + self.y * rhs.w + self.z * rhs.x + self.w * rhs.y,
             self.x * rhs.y - self.y * rhs.x + self.z * rhs.w + self.w * rhs.z,
            -self.x * rhs.x - self.y * rhs.y - self.z * rhs.z + self.w * rhs.w
        );
    }
}

struct Pose {
    var position: Vec3;
    var orientation: Quat;

    pub func identity() -> Pose {
        return Pose {
            position: Vec3.zero(),
            orientation: Quat.identity(),
        };
    }

    pub func relative(a: Pose, b: Pose) -> Pose {
        return Pose {
            position: a.orientation.inverse().rotate(b.position - a.position),
            orientation: a.orientation.inverse() * b.orientation,
        };
    }

    pub func interpolate(a: Pose, b: Pose, t: f32) -> Pose {
        return Pose {
            position: Vec3.lerp(a.position, b.position, t),
            orientation: Quat.slerp(a.orientation, b.orientation, t),
        };
    }

    pub func to_xr(self) -> xr.Posef {
        return xr.Posef {
            position: self.position.to_xr(),
            orientation: self.orientation.to_xr(),
        };
    }

    pub func __mul__(self, rhs: Pose) -> Pose {
        return Pose {
            position: self.position + self.orientation.rotate(rhs.position),
            orientation: self.orientation * rhs.orientation,
        };
    }
}
