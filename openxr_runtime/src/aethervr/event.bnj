use std.memory;

use xr;

use aethervr.log;

struct EventQueue {
    const LENGTH: u32 = 32;

    var buffer: *xr.EventDataBuffer;
    var push_index: u32;
    var poll_index: u32;

    pub func new() -> EventQueue {
        var buffer_size = LENGTH as usize * meta(xr.EventDataBuffer).size;

        return EventQueue {
            buffer: memory.alloc(buffer_size) as *xr.EventDataBuffer,
            push_index: 0,
            poll_index: 0
        };
    }

    pub func push(mut self, event_data: xr.EventDataBuffer) {
        self.push_index = next_index(self.push_index);
        self.buffer[self.push_index] = event_data;

        log.info("Event pushed with type %", event_data.type_ as i64);
    }

    pub func poll(mut self, event_data: *xr.EventDataBuffer) -> xr.Result {
        if self.push_index == self.poll_index {
            return xr.Result.EVENT_UNAVAILABLE;
        }

        self.poll_index = next_index(self.poll_index);
        *event_data = self.buffer[self.poll_index];

        log.info("Event polled with type %", event_data.type_ as i64);

        return xr.Result.SUCCESS;
    }

    func next_index(index: u32) -> u32 {
        if index == LENGTH - 1 {
            return 0;
        }

        return index + 1;
    }
}